#include <iostream>
using namespace std;

template<class DT>
class MaxHeap
{
public:
	//part1: constructor initializes array of size maxsize
	MaxHeap(int maxsize)
	{
		arr= new DT [maxsize];
		no_of_elements=0;
		max_size=maxsize;
	}

	//part2: Inserts data into its appropriate position
	//within the Heap
	bool insert(const DT data)
	{
		arr[no_of_elements+1]=data;
		no_of_elements++;
		mheap();
		return true;
	}
	void mheap()
	{
	int temp2=no_of_elements;
	int temp;
	while(temp2!=1)
	{
		if(arr[temp2]>arr[temp2/2])
		{
		temp=arr[temp2];
		arr[temp2]=arr[temp2/2];
		arr[temp2/2]=temp;
		}
		if(arr[temp2+1]>arr[temp2/2])
		{
		temp=arr[temp2+1];
		arr[temp2+1]=arr[temp/2];
		arr[temp2/2]=temp;
		}
		temp2=temp2/2;
	}
	}
	//part3: removes the element present in the the root 
	//of the Heap and readjusts it to form MaxHeap again
	DT Delete()
	{
		int temp=arr[1];
		arr[1]=arr[no_of_elements];
		arr[no_of_elements]=-1;
		mheap();
		no_of_elements--;
		return temp;
	}

	//part4: prints all the data present in the Heap
	//use the appropriate traversal 
	void printContents()
	{
	for(int i=0;i<no_of_elements;i++)
	cout<<arr[i]<<endl;
	}

	//part5: destructor, deletes the MaxHeap
	~MaxHeap()
	{
        delete arr;
	}



private:
	DT *arr;
	int no_of_elements; //Number of elements
	int max_size; // array size

};

int main()
{
	MaxHeap<int> *mxHeap; //creating an object of maxheap
	mxHeap=new MaxHeap<int>(40);

	//insert following data in the MaxHeap
	mxHeap->insert(12);
	mxHeap ->insert(43);
	mxHeap ->insert(9);
	mxHeap ->insert(2);
	mxHeap ->insert(14);
	mxHeap ->insert(16);
	mxHeap ->insert(13);
	mxHeap ->insert(12);

	mxHeap->printContents();

	//Carry out 2 deletions from the MaxHeap
	int output;
	output=mxHeap->Delete();

	cout<<"Output of first deletion is " <<output<<endl;
	mxHeap->printContents();

	output=mxHeap->Delete();

	cout<<"Output of second deletion is  "<<output<<endl;
	mxHeap->printContents();

	return 0;
}
