#include <iostream>
using namespace std;
class Node{
	public:
	int data;
	Node *next;
	
};
void insert(Node **n,int _data)
	{
		Node* temp = new Node();
		temp->data = _data;
        temp->next = (*n);
    	*n = temp;
	}
	void print(Node *start)
	{
		
		while(start!=NULL)
		{
			cout<<start->data;
			start=start->next;
		}
		cout<<endl;
	}
void swap(Node **_node,int key1,int key2)
{
    if (key1 == key2)
        return ;
 
    //Search Location of first key
    Node *prev1 = NULL, *curr1 = *_node;
    while (curr1 && curr1->data != key1) 
    {
        prev1 = curr1;
        curr1 = curr1->next;
    }
 
    // Search Location of second key
    Node *prev2 = NULL, *curr2 = *_node;
    while (curr2 && curr2->data != key2) 
	{
        prev2 = curr2;
        curr2 = curr2->next;
    }
 
    // If either of the key is NULL
    if (curr1 == NULL || curr2 == NULL)
    return;
 
    // If key1 is not at the head
    if (prev1 != NULL)
    prev1->next = curr2;
    else // if not the above case then create a new head
    *_node = curr2;
 
    // If key2 is not head
    if (prev2 != NULL)
   prev2->next = curr1;
    else // if not the above case then create a new head
    *_node = curr1;
 
    // Swap the next pointers of the key locations
    Node* temp = curr2->next;
    curr2->next = curr1->next;
    curr1->next = temp;

}
int main()
{
	Node *head=NULL;
	insert(&head,5);
	insert(&head,4);
	insert(&head,3);
	insert(&head,2);
	insert(&head,1);
	cout<<"Before Swap\n";
	print(head);
	cout<<"After Swap\n";
	swap(&head,1,5);
	print(head);

	return 0;
}
