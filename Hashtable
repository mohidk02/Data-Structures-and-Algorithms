#include <iostream>
#include <Windows.h>
using namespace std;

template<class DT>
class Hashtable
{
public:
	Hashtable(int Size)
	{
	size=Size;
	arr=new DT [size];
	for (int i=0;i<size;i++)
	{
	arr[i]=-1;
	}
	}
	bool store(DT key)
	{
		int x=key%size;
		if(arr[x]==-1)
		{
		arr[x]=key;
		return true;
		}
		else 
		{
		int y=x;
		while (arr[y]!=-1)
		{
		y=(y+1)%size;
		if(y==x ||arr[y]==key)
		{
		return false;
		}
		}
		arr[y]=key;
		cout<<key<<endl;
		return true;
		}
		return false;
	
	}
	bool search(DT key);

private:
	int size;
	DT* arr;
};

template<class DT>
bool Hashtable<DT>::search(DT identifier)
{
	bool success=true;
	int location = identifier%size;
	int j;
	for( j=location; arr[j]!=identifier; )
	{
		j=(j+1)%size;
		if(j==location || arr[j]==-1)
		{ success=false;//doesn't exist
		  break;
		}
	}
	if(success)
	{
		cout<<"found at "<<j<<endl;
	}
	return success;
}

int main()
{
	int num_of_identifiers;
	cout<<"Enter maximum number of keys that need to be stored in the hashtable: ";
	cin>>num_of_identifiers;

	int size_hashtable;
	cout<<"Enter size of hashtable needed to store these many identifiers (hint: use prime number): ";
	cin>>size_hashtable;

	//create a hashtable of this size 
	Hashtable<int>* ht=new Hashtable<int>(size_hashtable);
	
	for (int i=0; i<num_of_identifiers; i++)
	{
		int key=rand()%1000;
		bool was_stored = ht->store(key);
		if(!was_stored)
			cout<<key<<" could not be stored as it already exists or table is full"<<endl;
		cout<<"random key generated is = "<<key<<endl;
	}
	
	int find_key;
	cout<<"Enter the key to search for "<<endl;
	cin>>find_key;

	DWORD start, end;//measure time
	start= GetTickCount();
	bool found= ht->search(find_key);
	end= GetTickCount();
	double cpu_time_used = end - start;
	if(found) 
		cout<<"it was found in "<<cpu_time_used<<" milliseconds"<<endl;
	else
		cout<<"not found in "<<cpu_time_used<<" milliseconds"<<endl;
	return 0;
}
